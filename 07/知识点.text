1.布局
 layout:采用FLex(栅格化布局)
2.响应移动端开发
  使用react-reponse 插件
  如何使用：
      导入mediaQuery,
      例子：
      <MediaQuery query='(min-device-width:1224px)'>
         <PCIndex/>
      </MediaQuery>
      <MediaQuery query='(max-device-width:1224px)'>
         <MobileIndex/>
      </MediaQuery>
  《HTTP请求》
fetch 框架{
    用法：类似Ajax请求框架。Api数据请求
    安装：cnpm install fetch --save
    /*get*/
    getRequest(url){
      /*网络请求的配置*/
      var opts = {
          method:"GET"
      }
      fetch(url,opts)
          .then((response) => {
              return response.text();
          })
          .then((responseText) => {
              alert(responseText);
          })
          .catch((error) =>{
              alert(error);
          })
  }

  /*post请求*/

  postRequest(url){
       let formData = new FormData();
       formData.append("username","SuperBigLw");
       formData.append("password","123456");
       var opts = {
           method:"POST",
           body:formData
       }
       fetch(url,opts)
           .then((response) => {
               return response.text();
           })
           .then((responseText) => {
               alert(responseText);
           })
           .catch((error) => {
               alert(error)
           })
   }
   解决跨域问题（别人API） 方法：自己搭建本地服务器去发起请求
    springboot在Controller上添加
      @CrossOrigin 注解
    后端代码：
    String url="https://v.juhe.cn/toutiao/index?type="+type+"&key=ff082677ff87ca546d95d64cdb0b640f";
        RestTemplate template = new RestTemplate();
        HttpHeaders headers = new HttpHeaders();
        headers.setContentType(MediaType.APPLICATION_JSON_UTF8);
        MultiValueMap<String,String> variable = new LinkedMultiValueMap<>();
        variable.set("name","Clark_Lu");
        HttpEntity<MultiValueMap<String,String>> entity = new HttpEntity<>(variable,headers);
        System.out.println(template.postForEntity(url,entity,String.class).toString());
        return template.postForEntity(url,entity,String.class).getBody();
     启动服务ok,大功告成！
/*
    <Modal>
            warpClassName="vertical-center-modal"
            visible={this.state.modalVisible}
            onCancel={()=>this.setModalVisible(false)}
            onOK={()=>this.setModalVisible(false)} okText="关闭">
            <Tabs type="card">
              <TabPane tab="注册" key="2"></TabPane>
              <Form horizontal onSubmit={this.handleSubmit.bind(this)}>
                <FormItem label="账户">
                  <Input placeholder="请输入您的账号"{...getFieldDecorator('r_userName')}/>
                </FormItem>
                <FormItem label="密码">
                  <Input type="password" placeholder="请输入您的密码"{...getFieldDecorator('r_password')}/>
                </FormItem>
                <FormItem label="确认密码">
                  <Input type="password" placeholder="请确认您的密码"{...getFieldDecorator('confirmPassword')}/>
                </FormItem>
                <Button type="primary" htmlType="submit">注册</Button>
              </Form>
            </Tabs>
    </Modal>
*/
}
1.雅虎军规 35条介绍：对于前端构建的一先优化建议。
2.插件介绍：Yslow 插件 Google浏览器插件安装
            作用：可以对站点进行数据分析。
3、react-touch-loader 上拉下拉刷新 组件
安装 less 解析器
  1.   less and less-loader
4、强大的react 组件课
